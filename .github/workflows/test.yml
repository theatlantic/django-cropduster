name: Test

on: [push, pull_request]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        grappelli: ["0"]
        python-version: ["3.8"]
        django-version: ["3.2"]
        s3: ["0"]
        include:
          - grappelli: "0"
            name-suffix: ""
          - python-version: "3.7"
            django-version: "2.2"
          - grappelli: "1"
            python-version: "3.8"
            django-version: "2.2"
            name-suffix: " + grappelli"
          - python-version: "3.11"
            django-version: "4.2"
          - grappelli: "1"
            name-suffix: " + grappelli"
            python-version: "3.9"
            django-version: "3.2"
          - grappelli: "1"
            name-suffix: " + grappelli"
            python-version: "3.10"
            django-version: "4.0"
          - grappelli: "0"
            s3: "1"
            python-version: "3.8"
            django-version: "3.2"
            name-suffix: " + s3"

    runs-on: ubuntu-latest
    name: Django ${{ matrix.django-version }} (Python ${{ matrix.python-version }})${{ matrix.name-suffix }}

    env:
      DJANGO: ${{ matrix.django-version }}
      GRAPPELLI: ${{ matrix.grappelli }}
      S3: ${{ matrix.s3 }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      NODE_ENV: test

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies
      run: |
        sudo .github/workflows/apt-get-update.sh
        sudo apt-get install -y exempi gifsicle

    - name: Install tox
      run: |
       python3 -m pip install tox tox-gh-actions

    - name: Run tests
      run: |
        tox -- -v --selenosis-driver=chrome-headless || \
        tox -- -v --selenosis-driver=chrome-headless || \
        tox -- -v --selenosis-driver=chrome-headless

    - name: Upload junit xml
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: junit-reports
        path: reports/*.xml

    - name: Combine coverage
      run: tox -e coverage-report

    - name: Upload coverage
      run: tox -e codecov
      env:
        CODECOV_NAME: ${{ github.workflow }}

  report:
    if: always()
    needs: build
    runs-on: ubuntu-latest
    name: "Report Test Results"
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: junit-reports

      - name: Publish Unit Test Results
        if: always()
        uses: mikepenz/action-junit-report@1a91e26932fb7ba410a31fab1f09266a96d29971
        with:
          report_paths: ./*.xml
          require_tests: true
          fail_on_failure: true
          check_name: Test Report
          github_token: ${{ secrets.GITHUB_TOKEN }}

  success:
    needs: [report]
    runs-on: ubuntu-latest
    name: Test Successful
    steps:
      - name: Success
        run: echo Test Successful
